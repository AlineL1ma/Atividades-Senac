{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Usando def para criar uma função\n",
    "#Usando range\n",
    "def funcaoLeitura():\n",
    "    for num in range(5):\n",
    "        print('Número ', num)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Número  0\n",
      "Número  1\n",
      "Número  2\n",
      "Número  3\n",
      "Número  4\n"
     ]
    }
   ],
   "source": [
    "#Chamando a função para fora do bloco\n",
    "funcaoLeitura()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Usando def para criar uma função\n",
    "#Usando lista\n",
    "def funcaoLeitura():\n",
    "    for num in range[1,2,3,4,5]:\n",
    "        print('Número ', num)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "type 'range' is not subscriptable",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[4], line 2\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[38;5;66;03m#Chamando a função para fora do bloco\u001b[39;00m\n\u001b[1;32m----> 2\u001b[0m \u001b[43mfuncaoLeitura\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n",
      "Cell \u001b[1;32mIn[3], line 4\u001b[0m, in \u001b[0;36mfuncaoLeitura\u001b[1;34m()\u001b[0m\n\u001b[0;32m      3\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mfuncaoLeitura\u001b[39m():\n\u001b[1;32m----> 4\u001b[0m     \u001b[38;5;28;01mfor\u001b[39;00m num \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28;43mrange\u001b[39;49m\u001b[43m[\u001b[49m\u001b[38;5;241;43m1\u001b[39;49m\u001b[43m,\u001b[49m\u001b[38;5;241;43m2\u001b[39;49m\u001b[43m,\u001b[49m\u001b[38;5;241;43m3\u001b[39;49m\u001b[43m,\u001b[49m\u001b[38;5;241;43m4\u001b[39;49m\u001b[43m,\u001b[49m\u001b[38;5;241;43m5\u001b[39;49m\u001b[43m]\u001b[49m:\n\u001b[0;32m      5\u001b[0m         \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mNúmero \u001b[39m\u001b[38;5;124m'\u001b[39m, num)\n",
      "\u001b[1;31mTypeError\u001b[0m: type 'range' is not subscriptable"
     ]
    }
   ],
   "source": [
    "#Chamando a função para fora do bloco\n",
    "funcaoLeitura()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1. PARÂMETROS\n",
    "#Parâmetro é tudo o que está dentro dos parenteses\n",
    "#O parâmetro só funciona se estiver dentro da função\n",
    "#Uma função só funciona se houver parâmetro junto à ela"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Criando função para somar dois numeros\n",
    "#Parâmetro é tudo o que está dentro dos parenteses\n",
    "#num1 e num2 são os parâmetros\n",
    "#O parâmetro só funciona dentro da função\n",
    "\n",
    "def addNum(num1, num2):\n",
    "    print('O primeiro numero é', num1)\n",
    "    print('O segundo numero é', num2)\n",
    "    print('A soma dos dois numeros é', num1+num2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "O primeiro numero é 5\n",
      "O segundo numero é 6\n",
      "A soma dos dois numeros é 11\n"
     ]
    }
   ],
   "source": [
    "#Chamando a função para fora do bloco\n",
    "addNum(5, 6)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2. VARIÁVEIS GLOBAIS E LOCAIS\n",
    "#A variável Global pode funcionar mesmo estando fora da função\n",
    "#A variável Local funciona apenas se estiver dentro da função ou do bloco\n",
    "#A variavel local só valerá quando for chamada a função que está atribuida\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Criando uma variável Global\n",
    "#A variável Global pode funcionar mesmo fora da função\n",
    "varGlobal = 10 #Essa variavel é global (sempre que digitado o nome dessa variável, o valor aparecerá)\n",
    "def multiplicacao(value1, value2):\n",
    "    varGlobal = (value1 * value2) #Essa variavel é local (só valerá quando for chamada a função)\n",
    "    print ('Variavel da função multiplicada:', varGlobal)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Criando uma variável Local\n",
    "#A variável Local funciona apenas se estiver dentro da função ou do bloco\n",
    "varGlobal = 10 #Essa variavel é global\n",
    "def multiplica(value1, value2):\n",
    "    varLocal = (value1 * value2) #Essa variavel é Local (aparece apenas se for chamada)\n",
    "    print ('Váriavel da função multiplicada:', varLocal) \n",
    "    print (varLocal)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "3. MÓDULO\n",
    "#Módulo é uma função que puxa outra função (pode estar ligado à um parâmetro).\n",
    "#Split é um módulo (Split é usado para separar/cortar).\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Criando função com def\n",
    "def separarTexto(text): #\"Texto\" é o nome dado para o parâmetro\n",
    "    return text.split() #Split é um módulo (Split é usado para separar/cortar)\n",
    "\n",
    "#Módulo é uma função que puxa outra função, só funciona assim."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Cibele', 'Maria', 'Suely']"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Chamando a função para fora do bloco\n",
    "separarTexto('Cibele Maria Suely')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "4. VÁRIOS PARÂMETROS\n",
    "#Quando não sabemos a quantidade de parâmetros, basta usar o *\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Quando não sabemos a quantidade de parâmetros, basta usar o *\n",
    "def variosParametros(*parametros): #Criando função/ Criando um parâmetro multiplo\n",
    "    for n, item in enumerate(parametros):\n",
    "        print('Parâmetros', n, item)\n",
    "    return #retornar função"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Parâmetros 0 Bandinhas que amo!\n",
      "Parâmetros 1 The Smiths\n",
      "Parâmetros 2 Deftones\n",
      "Parâmetros 3 The Strokes\n",
      "Parâmetros 4 Radiohead\n",
      "Parâmetros 5 O Terno\n",
      "Parâmetros 6 Nirvana\n"
     ]
    }
   ],
   "source": [
    "#Chamando a função para fora do bloco\n",
    "variosParametros('Bandinhas que amo!', 'The Smiths', 'Deftones', 'The Strokes', 'Radiohead', 'O Terno', 'Nirvana')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
