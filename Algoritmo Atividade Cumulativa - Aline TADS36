{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1. Programa que mostra se é vogal ou consoante."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Está letra é uma vogal.\n"
     ]
    }
   ],
   "source": [
    "L = str(input(\"Digite aqui uma letra qualquer: \"))\n",
    "letrasV = ['A','a','E','e','I','i','O','o','U','u']\n",
    "\n",
    "if L in letrasV:\n",
    "    print('Está letra é uma vogal.')\n",
    "else:\n",
    "    print('Está letra é uma consoante.')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2. Programa que pede produtos e indica o mais barato."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "O produto que você deve comprar é o mentos\n"
     ]
    }
   ],
   "source": [
    "#Pedir os nomes e preços dos produtos.\n",
    "p1 = str(input('Digite aqui o nome do produto: '))\n",
    "v1 = float(input('Agora, digite aqui o preço do produto: '))\n",
    "    \n",
    "p2 = str(input('Digite aqui o nome do produto: '))\n",
    "v2 = float(input('Agora, digite aqui o preço do produto: '))\n",
    "    \n",
    "p3 = str(input('Digite aqui o nome do produto: '))\n",
    "v3 = float(input('Agora, digite aqui o preço do produto: '))\n",
    "\n",
    "#Definindo o menor preço.\n",
    "menor_preco = 0\n",
    "\n",
    "#Identificar o preço mais barato.\n",
    "if (v1 < v2 and v1 < v3):\n",
    "    menor_preco = p1\n",
    "elif  (v2 < v1 and v2 < v3):\n",
    "    menor_preco = p2\n",
    "else:\n",
    "    menor_preco = p3\n",
    "    \n",
    "#Mostrar o menor valor\n",
    "print(f'O produto que você deve comprar é o {menor_preco}')\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "3. Programa que lê e põem os números em ordem decrescente."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10.0 6.0 2.0\n"
     ]
    }
   ],
   "source": [
    "#Pedir os três números.\n",
    "numero1 = float(input('Digite o primeiro número'))\n",
    "numero2 = float(input('Digite o segundo número'))\n",
    "numero3 = float(input('Digite o terceiro número'))\n",
    "\n",
    "\n",
    "#Primeiro número da lista.\n",
    "if numero1 > numero2 and numero1 > numero3:\n",
    "    nuMaior = numero1\n",
    "elif numero1 > numero2 and numero1 < numero3:\n",
    "    nuDoMeio = numero1\n",
    "elif numero1 < numero2 and numero1 > numero3:\n",
    "    nuDoMeio = numero1\n",
    "else:\n",
    "    nuMenor = numero1\n",
    "\n",
    "\n",
    "#Segundo número da lista.\n",
    "if numero2 > numero1 and numero2 > numero3:\n",
    "    nuMaior = numero2\n",
    "elif numero2 > numero1 and numero2 < numero3:\n",
    "    nuDoMeio = numero2\n",
    "elif numero2 < numero1 and numero2 > numero3:\n",
    "    nuDoMeio = numero2\n",
    "else:\n",
    "    numero2 < numero1 and numero2 < numero3\n",
    "    nuMenor = numero2\n",
    "\n",
    "\n",
    "#Terceiro número da lista.\n",
    "if numero3 > numero1 and numero3 > numero2:\n",
    "    nuMaior = numero3\n",
    "elif numero3 > numero1 and numero3 < numero2:\n",
    "    nuDoMeio = numero3\n",
    "elif numero3 < numero1 and numero3 > numero2:\n",
    "    nuDoMeio = numero3\n",
    "else:\n",
    "    numero3 < numero1 and numero3 < numero2\n",
    "    nuMenor = numero3\n",
    "    \n",
    "print(nuMaior, nuDoMeio, nuMenor)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "4. Programa que pergunta o turno do estudante e comprimenta."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "turno = str(input(\"Digite em qual turno você está, usando M para Matutino, V para Vespertino ou N para Noturno: \"))\n",
    "\n",
    "if (turno == 'M' or turno == 'm'):\n",
    "    print('Bom dia!')\n",
    "elif (turno == 'V' or turno == 'v'):\n",
    "    print('Boa tarde!')\n",
    "elif (turno == 'N' or turno == 'n'):\n",
    "    print('Boa noite!')\n",
    "else:\n",
    "    print(\"Valor inválido!\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "5. Programa que exibe o dia correspondente da semana."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Definir lista dos dias.\n",
    "diasSemana = ['Domingo', 'Segunda', 'Terça', 'Quarta', 'Quinta', 'Sexta', 'Sábado']\n",
    " \n",
    "#Pedir um número e ler.\n",
    "diaNumero = int(input(\"Digite aqui um número de 1 até 7: \"))\n",
    "\n",
    "#Lendo e identificando o dia.\n",
    "if (diaNumero >= 1 and diaNumero <= 7):\n",
    "    print(diasSemana[diaNumero - 1])\n",
    "else:\n",
    "    print(\"Inválido!\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "5.1 Programa que lê e imprime a situação, as notas, a média e o conceito do aluno."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Aprovado! Com notas 9.0 e 9.0, com média 9.0 e conceito A\n"
     ]
    }
   ],
   "source": [
    "#Programa de Leitura de Notas.\n",
    "nota1 = float(input(\"Digite a primeira nota do aluno\"))\n",
    "nota2 = float(input(\"Digite a segunda nota do aluno\"))\n",
    "mediaAluno = ((nota1 + nota2) / 2) \n",
    "\n",
    "#Lista com os conceitos.\n",
    "conceitos = ['A', 'B', 'C', 'D', 'E']\n",
    "\n",
    "#Calculando e mostrando o resultado.\n",
    "if (mediaAluno >= 9 and mediaAluno <= 10):\n",
    "    print(f\"Aprovado! Com notas {nota1} e {nota2}, com média {mediaAluno} e conceito\", conceitos[0])\n",
    "elif (mediaAluno >= 7.5 and mediaAluno <= 9):\n",
    "    print(f\"Aprovado! Com notas {nota1} e {nota2}, com média {mediaAluno} e conceito\", conceitos[1])\n",
    "elif (mediaAluno >= 6 and mediaAluno <= 7.5):\n",
    "    print(f\"Aprovado! Com notas {nota1} e {nota2}, com média {mediaAluno} e conceito\", conceitos[2])\n",
    "elif (mediaAluno >= 4 and mediaAluno <= 6):\n",
    "    print(f\"Reprovado! Com notas {nota1} e {nota2}, com média {mediaAluno} e conceito\", conceitos[3])\n",
    "elif (mediaAluno >= 4 and mediaAluno <= 0):\n",
    "    print(f\"Reprovado! Com notas {nota1} e {nota2}, com média {mediaAluno} e conceito\", conceitos[4])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "6. Programa que pede um ano e verifica se é ou não bissexto."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "O ano de 1997 não é bissexto!\n"
     ]
    }
   ],
   "source": [
    "#Pedindo o número.\n",
    "numeroAno = int(input('Digite aqui um número correspondente a algum ano: '))\n",
    "\n",
    "#Calculando e definindo um ano bissexto.\n",
    "if (numeroAno % 4 == 0 and numeroAno % 100 !=0) or (numeroAno % 400 == 0):\n",
    "    print(f'O ano de {numeroAno} é bissexto!')\n",
    "else:\n",
    "    print(f'O ano de {numeroAno} não é bissexto!')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "7. Programa que mostra o resultado da operação escolhida, se o número é impar ou par, positivo ou negativo, decimal ou inteiro."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "numberOne = float(input(\"Digite aqui um número qualquer: \"))\n",
    "numberTwo = float(input(\"Digite aqui um segundo número qualquer: \"))\n",
    "operacao = input(\"Agora, diga qual tipo de operação básica você deseja realizar (soma, subtração, divisão, multiplicação e exponenciação): \")\n",
    "\n",
    "\n",
    "#Analisando as situações para gerar o resultado.\n",
    "\n",
    "if operacao == 'soma' or operacao == 'Soma':\n",
    "    resultado = numberOne + numberTwo\n",
    "\n",
    "elif operacao == 'subtração' or operacao == 'Subtração':\n",
    "    resultado = numberOne - numberTwo\n",
    "\n",
    "elif operacao == 'divisão' or operacao == 'Divisão':\n",
    "    if numberOne !=0:\n",
    "        resultado = numberOne / numberTwo\n",
    "    else:\n",
    "        print('Não foi possível realizar está divisão. Tente outro valor.')\n",
    "\n",
    "elif operacao == 'multiplicação' or operacao == 'Multiplicação':\n",
    "    resultado = numberOne * numberTwo\n",
    "\n",
    "elif operacao == 'exponenciação' or operacao == 'Exponenciação':\n",
    "    resultado = numberOne ** numberTwo\n",
    "\n",
    "else:\n",
    "    print('Operação inválida.')\n",
    "\n",
    "\n",
    "#Identificar se o resultado é impar ou par.\n",
    "if resultado % numberTwo == 0:\n",
    "    parImpar = 'Par'\n",
    "else:\n",
    "    parImpar = 'Impar'\n",
    "\n",
    "\n",
    "#Identificar se o resultado é negativo ou positivo.\n",
    "if resultado >= 1:\n",
    "    sinal = 'Positivo'\n",
    "elif resultado == 0:\n",
    "    sinal = 'Neutro'\n",
    "else:\n",
    "    sinal = 'Negativo'\n",
    "\n",
    "\n",
    "#Identificar se o resultado é inteiro ou decimal.\n",
    "if resultado == int(resultado):\n",
    "    intDeci = 'Inteiro'\n",
    "else:\n",
    "    intDeci = 'Decimal'\n",
    "\n",
    "\n",
    "#Mostrando o resultado de toda a operação usando o print.\n",
    "print(f'O resultado da sua operação é {resultado}. Este número é {parImpar}, além de ser {sinal} e um número {intDeci}.')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "8. Programa que pede e exibe a idade."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Idade informada inexistente.\n"
     ]
    }
   ],
   "source": [
    "#Pedindo a idade ao usuário.\n",
    "idade = int(input('Digite aqui a sua idade: '))\n",
    "\n",
    "#Verificando e mostrando o resultado.\n",
    "if (idade > 0 and idade < 150):\n",
    "    print(f'A idade mencionada é de {idade} anos.')\n",
    "else:\n",
    "    print('Idade informada inexistente.')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "9. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Pedir os números em repetição.\n",
    "for numeros in range(5):\n",
    "    numeros = int(input('Digite cinco números interios: '))\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "10. Programa que identifica se o número é primo ou não."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "numero = int(input('Digite aqui um número qualquer: '))\n",
    "\n",
    "if numero % numero == 0 or numero % (numero + 2) == 0:\n",
    "    print('Este número é primo.')\n",
    "else:\n",
    "    print('Este número não é primo.')\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
